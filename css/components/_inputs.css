@charset "UTF-8";
input[type=text],
input[type=number] {
  box-sizing: border-box;
  font-size: 1.125rem;
  line-height: 1;
  font-weight: 500;
  display: block;
  width: 100%;
  margin: 0;
  padding: 0;
  border: 1px solid rgb(0, 0, 0);
  border-radius: 1.5rem;
  padding: 0.75rem 1.5rem;
}

.color_container {
  box-sizing: border-box;
  width: 3rem;
  aspect-ratio: 1/1;
  border-radius: 50%;
  border: 1px solid rgb(0, 0, 0);
  padding: 0.25rem;
  height: 3rem;
}
.color_container .color_dot {
  box-sizing: border-box;
  background-color: var(--section_color);
  display: block;
  width: 100%;
  height: 100%;
  border-radius: 50%;
}
.color_container .color_dot.maroon {
  --section_color: rgb(113, 17, 17);
}
.color_container .color_dot.red {
  --section_color: hsl(0deg, 90%, 60%);
}
.color_container .color_dot.crimson {
  --section_color: hsl(13deg, 99%, 51%);
}
.color_container .color_dot.orange {
  --section_color: rgb(249, 135, 21);
}
.color_container .color_dot.gold {
  --section_color: rgb(192, 131, 19);
}
.color_container .color_dot.yellow {
  --section_color: rgb(246, 207, 31);
}
.color_container .color_dot.lemon {
  --section_color: rgb(255, 255, 105);
}
.color_container .color_dot.lime {
  --section_color: rgb(165, 251, 78);
}
.color_container .color_dot.green {
  --section_color: rgb(40, 200, 40);
}
.color_container .color_dot.spring_green {
  --section_color: rgb(34, 227, 131);
}
.color_container .color_dot.electric_blue {
  --section_color: rgb(33, 236, 255);
}
.color_container .color_dot.sky_blue {
  --section_color: hsl(210deg, 95%, 70%);
}
.color_container .color_dot.blue {
  --section_color: hsl(220deg, 70%, 50%);
}
.color_container .color_dot.navy {
  --section_color: rgb(18, 48, 110);
}
.color_container .color_dot.violet {
  --section_color: hsl(270deg, 80%, 60%);
}
.color_container .color_dot.magenta {
  --section_color: hsl(300deg, 80%, 60%);
}
.color_container .color_dot.rose {
  --section_color: hsl(330deg, 80%, 60%);
}
.color_container .color_dot.hot_pink {
  --section_color: hsl(330deg, 95%, 70%);
}
.color_container .color_dot.black {
  --section_color: rgb(0, 0, 0);
}
.color_container .color_dot.grey {
  --section_color: rgb(217, 217, 217);
}
.color_container form {
  position: absolute;
  width: 100%;
  max-height: 0;
  opacity: 1;
  transform: translateY(3rem);
  overflow: hidden;
  transition: 0.3s all;
  width: 100%;
  left: 0;
  background-color: rgb(255, 255, 255);
  box-shadow: 0 0.5rem 2rem 0 rgba(0, 0, 0, 0.25);
  border-radius: 0.5rem;
  padding: 0rem 1rem;
  z-index: 100;
}
.color_container form .color_list {
  max-height: 100%;
  overflow-y: scroll;
}
.color_container form .color_list li {
  border-bottom: 1px solid rgb(225, 225, 225);
  display: flex;
  justify-content: space-between;
  font-size: 1rem;
  width: 100%;
  gap: 1rem;
  padding: 0.25rem 0;
}
.color_container form .color_list li input {
  display: none;
}
.color_container form .color_list li label {
  font-family: "Public Sans", sans-serif;
  display: flex;
  justify-content: space-between;
  width: 100%;
  padding: 0.45rem 0.25rem;
  text-transform: capitalize;
}
.color_container form .color_list li label span {
  flex-grow: 1;
  display: block;
  margin-left: 0.5rem;
}
.color_container form .color_list li label::after {
  content: "";
  width: 2rem;
  height: 1rem;
  display: block;
  background-color: var(--thisColor);
  border: 1px solid rgb(125, 125, 125);
}
.color_container form .color_list li label::before {
  content: "âœ“";
  display: block;
  opacity: 0;
}
.color_container form .color_list li input:checked + label {
  background-color: rgba(0, 0, 0, 0.1);
}
.color_container form .color_list li input:checked + label:before {
  opacity: 1;
}
.color_container.isOpen form {
  max-height: 100vh;
  opacity: 1;
  padding: 1rem;
  transform: translate(-50%, -50%);
  position: fixed;
  top: 0%;
  left: 50%;
  height: 90%;
  width: 60%;
}
.color_container input[value=maroon] + label {
  --thisColor: rgb(113, 17, 17);
}
.color_container input[value=red] + label {
  --thisColor: hsl(0deg, 90%, 60%);
}
.color_container input[value=crimson] + label {
  --thisColor: hsl(13deg, 99%, 51%);
}
.color_container input[value=orange] + label {
  --thisColor: rgb(249, 135, 21);
}
.color_container input[value=gold] + label {
  --thisColor: rgb(192, 131, 19);
}
.color_container input[value=yellow] + label {
  --thisColor: rgb(246, 207, 31);
}
.color_container input[value=lemon] + label {
  --thisColor: rgb(255, 255, 105);
}
.color_container input[value=lime] + label {
  --thisColor: rgb(165, 251, 78);
}
.color_container input[value=green] + label {
  --thisColor: rgb(40, 200, 40);
}
.color_container input[value=spring_green] + label {
  --thisColor: rgb(34, 227, 131);
}
.color_container input[value=electric_blue] + label {
  --thisColor: rgb(33, 236, 255);
}
.color_container input[value=sky_blue] + label {
  --thisColor: hsl(210deg, 95%, 70%);
}
.color_container input[value=blue] + label {
  --thisColor: hsl(220deg, 70%, 50%);
}
.color_container input[value=navy] + label {
  --thisColor: rgb(18, 48, 110);
}
.color_container input[value=violet] + label {
  --thisColor: hsl(270deg, 80%, 60%);
}
.color_container input[value=magenta] + label {
  --thisColor: hsl(300deg, 80%, 60%);
}
.color_container input[value=rose] + label {
  --thisColor: hsl(330deg, 80%, 60%);
}
.color_container input[value=hot_pink] + label {
  --thisColor: hsl(330deg, 95%, 70%);
}
.color_container input[value=black] + label {
  --thisColor: rgb(0, 0, 0);
}
.color_container input[value=grey] + label {
  --thisColor: rgb(217, 217, 217);
}